name: Build App
run-name: Build ${{ inputs.environment}}

on:
  workflow_call:
    inputs:
      environment:
        description: "Environment"
        type: string
      build-mode:
        description: "Build Mode"
        type: string
      version-name:
        description: "Version Name Override - e.g. '2024.8.1'"
        type: string
      version-number:
        description: "Version Number Override - e.g. '1021'"
        type: string
      xcode-version:
        description: "Xcode Version Override - e.g. '15.2'"
        type: string
      compiler-flags:
        description: "Compiler Flags - e.g. 'DEBUG_MENU FEATURE2'"
        type: string
      distribute:
        description: "Distribute to TestFlight"
        type: boolean
env:
  _ENV: ${{ inputs.environment || 'bwpm-prod' }}
  _BUILD_VARIANT: ${{ inputs.environment == 'bwpm-prod' && 'Production' || 'Beta' }} #TODO: improve build variant check by migrating configure_provisioning_profiles.sh to fastlane
  _BUILD_MODE: ${{ inputs.build-mode || 'Device' }}
  _XCODE_VERSION: ${{ inputs.xcode-version }}
  _VERSION_NAME: ${{ inputs.version-name }}
  _VERSION_NUMBER: ${{ inputs.version-number }}
  _COMPILER_FLAGS: ${{ inputs.compiler-flags }}
  _GITHUB_ACTION_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}
  _EXPORT_PATH: 'export'

jobs:
  build:
    name: Build
    runs-on: macos-15
    env:
      MINT_PATH: .mint/lib
      MINT_LINK_PATH: .mint/bin
    steps:
      - name: Log inputs to job summary
        run: |
          echo "<details><summary>Build Workflow Inputs</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '${{ toJson(inputs) }}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY

      - name: Check out repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Read Xcode version from file if not provided
        run: |
          if [ -z "$_XCODE_VERSION" ]; then
            echo "_XCODE_VERSION=$(cat .xcode-version | tr -d '\n')" >> "$GITHUB_ENV"
          fi

      #TODO: replace with xcode-select instruction
      - name: Set Xcode version
        uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd # v1.6.0
        with:
          xcode-version: ${{ env._XCODE_VERSION }}

      - name: Configure Ruby
        uses: ruby/setup-ruby@354a1ad156761f5ee2b7b13fa8e09943a5e8d252 # v1.229.0
        with:
          bundler-cache: true

      - name: Install Homebrew Dependencies
        run: |
          brew update
          brew install fastlane@2.227.1
          brew install mint
          brew install yq
          brew install swift-protobuf

      - name: Log in to Azure
        if: env._BUILD_MODE == 'Device'
        uses: Azure/login@cb79c773a3cfa27f31f25eb3f677781210c9ce3d # v1.6.1
        with:
          creds: ${{ secrets.AZURE_KV_CI_SERVICE_PRINCIPAL }}

      - name: Setup secrets
        if: env._BUILD_MODE == 'Device'
        run: |
          mkdir -p $HOME/secrets
          bundle exec fastlane setup_secrets \
            --env $_ENV \
            secrets_path:$HOME/secrets/ \
            fastlane_creds_filename:appstoreconnect-fastlane.json \
            az_account_name:bitwardenci \
            az_profiles_container:profiles \
            az_files_container:mobile

          mkdir -p $HOME/certificates
          # az keyvault secret show --id https://bitwarden-ci.vault.azure.net/certificates/ios-distribution |
          #   jq -r .value | base64 -d > $HOME/certificates/ios-distribution.p12

      - name: Configure Keychain Access
        if: env._BUILD_MODE == 'Device'
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        run: |
          security create-keychain -p $KEYCHAIN_PASSWORD build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p $KEYCHAIN_PASSWORD build.keychain
          security set-keychain-settings -lut 1200 build.keychain

          security import $HOME/certificates/ios-distribution.p12 -k build.keychain -P "" -T /usr/bin/codesign \
            -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PASSWORD build.keychain

      - name: Setup code files
        run: |
          bundle exec fastlane setup_code_files \
            --env $_ENV \
            build_mode:$_BUILD_MODE \
            version_name:$_VERSION_NAME \
            version_number:$_VERSION_NUMBER \

          bundle exec fastlane update_ci_build_info \
            --env $_ENV \
            repository:$GITHUB_REPOSITORY \
            branch:$GITHUB_REF_NAME \
            commit_hash:$GITHUB_SHA \
            ci_run_number:$GITHUB_RUN_ID \
            ci_run_attempt:$GITHUB_RUN_ATTEMPT \
            compiler_flags:"$_COMPILER_FLAGS"

      - name: Cache Mint packages
        id: mint-cache
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: .mint
          key: ${{ runner.os }}-mint-${{ hashFiles('**/Mintfile') }}
          restore-keys: |
            ${{ runner.os }}-mint-

      - name: Install Mint packages
        if: steps.mint-cache.outputs.cache-hit != 'true'
        run: |
          mint bootstrap

      - name: Build ${{ inputs.environment }}
        env:
          IS_BWPM: ${{ startsWith(inputs.environment, 'bwpm-') }}
        run: |
          #TODO merge build script / migrate to fastlane
          if [ "$IS_BWPM" = true ]; then
            ./Scripts/build.sh $_BUILD_MODE
          else
            ./Scripts-bwa/build.sh #TODO add support for simulator Authenticator builds
          fi

      - name: Prepare artifacts for upload to GitHub
        run: |
          mkdir -p $_EXPORT_PATH
          mkdir -p $_EXPORT_PATH/dSYMs
          bundle exec fastlane post_build \
            --env $_ENV \
            build_mode:$_BUILD_MODE \
            export_path:$_EXPORT_PATH

      - name: Get artifact name
        id: get_artifact_name
        run: |
          ARTIFACT_NAME=$(bundle exec fastlane get_artifact_name --env $_ENV | grep "artifact_filename: " | cut -d' ' -f3)
          echo "ðŸ§± Artifact name: $ARTIFACT_NAME"
          echo "filename=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

      - name: Upload artifacts to GitHub
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: ${{ steps.get_artifact_name.outputs.filename }}
          path: ${{ env._EXPORT_PATH }}
          if-no-files-found: error

      - name: Set up private auth key
        if: env._BUILD_MODE == 'Device'
        run: |
          mkdir ~/private_keys
          cat << EOF > ~/private_keys/AuthKey_J46C83CB96.p8
          ${{ secrets.APP_STORE_CONNECT_AUTH_KEY }}
          EOF

      - name: Validate app with App Store Connect
        if: env._BUILD_MODE == 'Device'
        run: |
          xcrun altool --validate-app \
            --type ios \
            --file "export/Bitwarden.ipa" \
            --apiKey "J46C83CB96" \
            --apiIssuer "${{ secrets.APP_STORE_CONNECT_TEAM_ISSUER }}"

      - name: Upload app to TestFlight with Fastlane
        if: ${{ inputs.distribute && env._BUILD_MODE == 'Device' }}
        run: |
          CHANGELOG="$(git show -s --format=%s)
          $GITHUB_REPOSITORY/$GITHUB_REF_NAME @ $GITHUB_SHA
          Xcode $_XCODE_VERSION
          Compiler Flags: $_COMPILER_FLAGS
          $_GITHUB_ACTION_RUN_URL"

          fastlane upload_build \
            api_key_path:"$HOME/secrets/appstoreconnect-fastlane.json" \
            changelog:"$CHANGELOG" \
            ipa_path:"export/Bitwarden.ipa"
